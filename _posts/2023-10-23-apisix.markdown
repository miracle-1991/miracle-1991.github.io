---
title: Apisix
date: 2023-10-23 18:00:00 +0800
categories: [service_mesh]
tags: [apisix, gateway]
author: miracle
mermaid: true
---

## Apisix是什么
Apache APISIX 是一个动态、实时、高性能的 API 网关。由 Apache 基金会主导开发，并已成为顶级开源项目。它提供了负载均衡、动态上游、灰度发布、服务熔断、身份验证、可观测性等丰富的特性，可用于处理微服务 API 网关的所有请求，包括流量切分、业务分发、服务熔断、身份认证等。

APISIX 使用 ETCD 作为配置存储，使得更改配置具有原子性，且支持横向扩展。同时，它能够管理、分析、监控和处理你的 API 工作流，帮助开发人员和技术团队管理复杂的 API 交付。

APISIX 的主要功能和优势包括：
- **可扩展性**：提供了丰富的插件机制，用户可以根据需求自定义开发插件。
- **动态路由和上游**：支持对路由、上游实体动态的新增、删除、更新操作，且修改实时生效，无需重启服务。
- **负载均衡**：支持 Round Robin、Consistent Hashing、Eureka、Nacos 等多种负载均衡机制。
- **服务熔断与限流**：内置熔断器，避免服务雪崩，在服务出现问题时，可以自动切断对上游服务的请求。
- **身份认证**：支持多种身份认证，如 key-auth、JWT token 等。

## 为什么用apisix，apisix相比较其他的gateway有什么优点
Apache APISIX 相比于其他 API 网关产品有以下几个突出优点：

1. **丰富的插件**：Apache APISIX 提供了超过50种插件，覆盖了认证、安全、流量控制等多个方面，用户可以按需启用。同时，APISIX 还提供插件开发套件，方便用户进行定制开发。

2. **高性能**：Apache APISIX 是基于 OpenResty 的高性能微服务 API 网关。OpenResty 利用 Nginx 高并发、IO 多路复用的特点，并通过 LuaJIT 来实现网络协议的高效处理，这使得 APISIX 在高并发场景下仍能保持较高的性能。

3. **动态路由和上游**：Apache APISIX 支持动态的路由和上游管理，包括动态负载均衡、灰度发布、蓝绿部署、Canary Release等高级特性。

4. **IPv6 支持**：Apache APISIX 完全支持 IPv6，符合未来网络的发展需求。

5. **强大的社区支持**：Apache APISIX 是由 Apache 基金会主导开发和维护的开源项目，拥有活跃的社区和众多的贡献者。

6. **简洁易用**：APISIX 提供了友好的控制台界面，能够帮助用户快速、简单地创建、测试和发布 API。

## apisix的基础架构是什么样的
Apisix的架构如图所示, 可以分为数据面和控制面，控制面可以部署到1个节点上，而数据面可以是多个节点：
![apisix架构](/assets/img/apisix/apisix.png)
1. **数据面**：以NGINX的网络库为基础，使用lua和NGINX动态控制请求流量
2. **控制面**：使用etcd来存储和同步网关的配置数据，管理员通过admin api或者dashboard在毫秒内通知所有的数据面节点

Apisix控制面可以理解为一个管理界面，这个界面会将配置下发给etcd，而apisix数据面是真正执行逻辑的地方。Apisix数据面的架构如下所示：
![apisix数据面架构](/assets/img/apisix/apisix-data-interface.png)
Apisix本质上是基于OpenResty再开发的。OpenResty是一个强大的网络服务器软件，它基于 NGINX 和一些可选的模块，提供了大量的库、一些标准的 Perl 兼容的正则表达式接口、许多高质量的第三方模块，以及大多数操作系统用于处理网络、文件系统等任务的常用接口。
APISIX Core基于OpenResty,主要处理一些重要的功能，如匹配路由、负载均衡、服务发现、配置管理等，并提供管理 API。
它还包括支持 Lua 和多语言插件（Go、Java、Python、JavaScript等）的 APISIX 插件运行时。


***在实际使用中，其他语言的插件其实是运行在一个单独的进程中，apisix以进程间通信的方式向这些进程发送任务并获取任务执行的结果，执行效率比较低。
最好还是用lua写插件，然后与apisix的源代码一起编译，然后enable这个插件，允许插件启动时加载。这种插件写起来更简单，并且执行更快！***

## apisix中的插件是怎么运行的
apisix可以为每个路由搭配任意多个插件，以请求流量为例:
1. 首先根据请求匹配到对应的routeID,在根据routeID找到配置的多项插件
2. 每项插件中都有自己的配置，根据配置运行插件，比如在header中增加固定的内容
3. 所有的插件执行完后发送给upstream
![apisix执行插件](/assets/img/apisix/apisix-run-plugins.png)
当然，插件不仅可以处理request,对于upstream返回的response,插件也能对其进行修改。


在apisix中插件分成这几个等级，并且都能在这些等级中运行：

![apisix插件等级](/assets/img/apisix/apisix-plugin-hierarchy.png)
1. **init**: 初始化阶段，只会在启动时执行一次，此处执行的插件通常用于设置全局项
2. **check_schema**: 参数验证阶段，验证用户配置插件时提供的参数是否符合插件定义的 schema 规则。每个 APISIX 插件都有一个自己的 schema，定义了用户配置该插件时可以使用的参数及其数据类型、默认值等信息
3. **rewrite**: 预处理阶段，插件可以在这里对请求预处理，比如修改请求参数、重写URL、改写头部等
4. **access**: 鉴权阶段，允许插件在此处进行身份验证、授权、访问限制等
5. **before_proxy**: before_proxy阶段, 在代理请求前执行，可以修改即将发送到上游服务的请求，比如添加头部、编译请求数据或者执行其他只影响当前请求的操作
6. **header_filter**： resp header处理阶段，此处可以对upstream返回的header进行修改
7. **body_filter**: resp body处理阶段，此处可以对upstream返回的body进行处理
8. **log**: log阶段，通常在此步骤中，茶酱会将请求或者相应写入日志文件或者发给外部日志服务


而关于负载均衡，APISIX 在 Balancer 阶段通过诸如轮询、一致性哈希等算法，基于预定义的负载均衡策略来选取上游节点。然而，这个过程通常是由 APISIX 核心处理的，插件一般不会在这个阶段运行。

## apisix中怎么开发新的插件, lua插件与其他插件运行时的区别
在 Apache APISIX 中开发新的插件需要以下步骤：

1. 在APISIX的 `apisix/plugins` 目录创建一个新的 Lua 文件。这个文件应当包含一个名为 `check_schema` 的函数，用于验证插件配置的 schema，以及一个或多个处理请求和响应的阶段函数。
2. 在 `apisix/plugin.lua` 文件中注册新的插件。
3. 在 `apisix/conf/config.yaml` 文件中启用新的插件。
4. 对新的插件进行测试，确保功能正确且没有性能问题。

例如，新增一个插件，在header头中插入hello world:
```
-- 定义插件名和版本
local plugin_name = "hello-world"
local plugin_version = "1.0"

-- 定义插件的 schema
local schema = {
  type = "object",
  properties = {},
  additionalProperties = false,
}

-- 定义阶段处理函数，在 access 阶段添加一个请求头 hello: world
local function access(conf)
  ngx.req.set_header("Hello", "World")
end

-- 返回插件定义，包括name、schema和各阶段处理函数
return {
  version = plugin_version,
  priority = 1000,  -- 优先级，优先级高的插件先执行
  name = plugin_name,
  schema = schema,
  check_schema = function(conf)  -- 检查配置
    local ok, err = core.schema.check(schema, conf)
    return ok, err
  end,
  filter_schema = function(conf)  -- 过滤配置
    return core.schema.filter(schema, conf)
  end,
  access = access
}
```

至于插件运行时的区别：

- **Lua 插件**：在 APISIX 中，Lua 插件直接运行在 OpenResty 中，可以充分利用 OpenResty 的非阻塞 I/O 和协程优势，并可以直接访问 OpenResty 的所有 API。这使得 Lua 插件执行速度快，适合处理高频的请求。

- **其他插件运行时（如 Go、Java、Python）**：这些插件通常运行在 Apache APISIX Runner 中，通过 API 和 APISIX 进行交互。这样的设计是为了满足使用其他编程语言编写插件的需求，比如 Java 的 Dubbo、Spring Cloud 插件，Go 的 MOSN 插件等。使用这些插件运行时，用户可以用他们熟悉的编程语言开发 APISIX 插件，不过需要注意的是，这些插件运行时的执行效率可能会低于 Lua 插件运行时。

每种插件运行时都有自己的用途，它们可以根据不同的场景和需求来选择。


